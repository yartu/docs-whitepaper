import{_ as e,o as t,c as i,d as r}from"./app.c3ba526e.js";const o="/images/protocols_membership_1.png",s="/images/protocols_membership_2.png",p={},a=r('<h2 id="private-set-membership" tabindex="-1"><a class="header-anchor" href="#private-set-membership" aria-hidden="true">#</a> Private Set Membership</h2><p>Private Set Membership is a cryptographic protocol that allows users to privately query whether their identifier is a member of a given set of identifiers held by a server in a privacy-preserving manner. In the context of blockchain, private set membership is more interesting due the single decentralized ledger. Users can enroll to a particular context and then do any action privately such as voting. Semaphore has proven that private membership is efficiently applicable.</p><ul><li><p>A semaphore group is on a smart contract</p></li><li><p>It is an incremental Merkle tree</p></li></ul><p><strong>Join:</strong> A public key (identity commitment) pk can be added to the tree</p><p><strong>Leave:</strong> Users can also remove their identities from the tree</p><ol><li><p>Generate a secret key sk.</p></li><li><p>Compute the public key (identity commitment) pk = Poseidon(sk,0).</p></li><li><p>For a given topic, compute a nullifier n = Poseidon(sk, topic).</p></li><li><p>Compute a signal s = n + ZKP.</p></li></ol><p><strong>I****dentity:</strong> (sk, n, pk, s).</p><p><img src="'+o+'" alt="Semaphore1"><img src="'+s+'" alt="Semaphore2"></p><p><strong>Figure 9</strong>. Semaphore</p><ul><li><p>Compute Nullifier n= H(sk, topic)where topic = “Is Bitcoin at the start of a bear market?”</p></li><li><p>Signal is s_i = n + &quot;Yes/No&quot; + ZKSNARK for membership proofs</p></li></ul>',10),n=[a];function l(c,m){return t(),i("div",null,n)}const d=e(p,[["render",l],["__file","membership.html.vue"]]);export{d as default};
